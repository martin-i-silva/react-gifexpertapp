{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","console","log","type","value","onChange","target","placeholder","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","setTimeout","then","imgs","useFetchGifs","key","GifExpertApp","categories","c","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAkBO,OACnCC,QAAQC,IAAI,gBACZR,EAAc,OAMd,2BACAS,KAAK,OACLC,MAAOX,EACPY,SApBkB,SAACT,GAEzBF,EAAcE,EAAEU,OAAOF,QAmBjBG,YAAY,wBCzBXC,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEpC,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATnB,kBAYZY,GAZY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAY,IAAD,EACVxB,mBAAS,CAC/B8B,KAAM,GACNO,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAqBpC,OAhBAC,qBAAU,WAENC,YAAW,WACPlB,EAAQC,GACHkB,MAAK,SAAAC,GACFJ,EAAS,CACLT,KAAMa,EACNN,SAAS,SAIrB,OAEH,CAACb,IAGCc,EDnByBM,CAAapB,GAAhCU,EADwB,EAC7BJ,KAAaO,EADgB,EAChBA,QAEvB,OACE,oCACE,4BAAKb,GACHa,GAAW,yBAAKjB,UAAU,oBAChC,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,2BAGX,yBAAKA,UAAU,aACZc,EAAOF,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaY,IAAKZ,EAAIhB,IAAQgB,UEYzBa,MAnCf,WAAyB,IAAD,EAGgB9C,mBAAS,CAAC,cAH1B,mBAGb+C,EAHa,KAGDhD,EAHC,KAgBpB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEI,4BACKgD,EAAWf,KAAI,SAAAgB,GAAC,OACjB,kBAAC,EAAD,CACAH,IAAKG,EACLxB,SAAUwB,U,MCxB9BC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.1ed4da1f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleInputChange = (e)=>{\r\n               \r\n      setInputValue(e.target.value)\r\n\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cat=>[inputValue, ...cat ])\r\n            console.log('Submit hecho');\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"text\" \r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            placeholder='Ingrese una serie'\r\n\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p> \r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=12&api_key=lfLOPCg4HHXceg00QHQjVeHB9mIHQHIB`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs;\r\n  };","import React from \"react\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data:images, loading} = useFetchGifs(category)\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n       {loading && <div className=\"sk-fading-circle\">\r\n  <div className=\"sk-circle1 sk-circle\"></div>\r\n  <div className=\"sk-circle2 sk-circle\"></div>\r\n  <div className=\"sk-circle3 sk-circle\"></div>\r\n  <div className=\"sk-circle4 sk-circle\"></div>\r\n  <div className=\"sk-circle5 sk-circle\"></div>\r\n  <div className=\"sk-circle6 sk-circle\"></div>\r\n  <div className=\"sk-circle7 sk-circle\"></div>\r\n  <div className=\"sk-circle8 sk-circle\"></div>\r\n  <div className=\"sk-circle9 sk-circle\"></div>\r\n  <div className=\"sk-circle10 sk-circle\"></div>\r\n  <div className=\"sk-circle11 sk-circle\"></div>\r\n  <div className=\"sk-circle12 sk-circle\"></div>\r\n</div> } \r\n      {/*Esto es una forma abreviada a poner: loading? <p>Loading</p> : null */}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} /> // ESTO REEMPLAZA A img={img} y envia en vez de props el img (se puede desestructurar despues)\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category)=>{\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n    useEffect(() => { // Los efectos no pueden ser async porque esperan un evento sincrono\r\n        \r\n        setTimeout(()=>{\r\n            getGifs(category)\r\n                .then(imgs=>{\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                })\r\n          \r\n         }, 2000)\r\n    \r\n      }, [category]);\r\n\r\n\r\n    return state; // El state es un objeto==> {data: [], loading: true,}\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nfunction GifExpertApp() {\r\n\r\n    \r\n    const [categories, setCategories] = useState(['One punch'])\r\n\r\n    // const handleAdd = ()=>{\r\n    //     //setCategories( categories.push('Boku no hero')) ESTO REVIENTA TODO\r\n        \r\n    //     // Alternativa 1\r\n    //     //setCategories([...categories, 'Boku no hero'])\r\n    //     //setCategories(['Boku no hero', ...categories]) Alternativa \r\n\r\n    //     //Alternativa con callbakcs\r\n    //     setCategories(cat=>[...cat, 'Boku no hero'])// sirve para utilizar en otro componente exportando solo el setCategorias\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n                <ul>\r\n                    {categories.map(c=>(\r\n                    <GifGrid \r\n                    key={c}\r\n                    category={c}/>\r\n                    )\r\n                    )}\r\n                </ul>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}